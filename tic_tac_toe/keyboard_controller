#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import sys
import tty
import termios
import threading
import time

class KeyboardControlNode(Node):
    def __init__(self):
        super().__init__('keyboard_controller')
        
        # Create publisher for keyboard input
        self.key_pub = self.create_publisher(String, '/keyboard_input', 10)
        
        self.get_logger().info('Keyboard controller started!')
        self.get_logger().info('Controls:')
        self.get_logger().info('- WASD: Move the turtle (w=up, a=left, s=down, d=right)')
        self.get_logger().info('- m: Mark the current cell')
        self.get_logger().info('- r: Reset the game')
        self.get_logger().info('- q: Quit')
        
        # Start keyboard input thread
        self.running = True
        self.input_thread = threading.Thread(target=self.get_keyboard_input)
        self.input_thread.daemon = True
        self.input_thread.start()
        
    def get_keyboard_input(self):
        while self.running:
            key = self.get_key()
            if key.lower() in ['w', 'a', 's', 'd', 'm', 'r', 'q']:
                msg = String()
                msg.data = key.lower()
                self.key_pub.publish(msg)
                
                if key.lower() == 'q':
                    self.running = False
                    self.get_logger().info("Quitting...")
                    break
                    
            time.sleep(0.1)  # Small delay to prevent flooding
            
    def get_key(self):
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch
        
    def destroy_node(self):
        self.running = False
        if self.input_thread.is_alive():
            self.input_thread.join(1.0)
        super().destroy_node()


def main(args=None):
    rclpy.init(args=args)
    node = KeyboardControlNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
